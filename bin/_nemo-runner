#!/usr/bin/env node
'use strict';


/**
 * Module dependencies.
 */

let program = require('commander');
const path = require('path');
const fs = require('fs');
const resolve = path.resolve;
const spawn = require('threads').spawn;
const Pool = require('threads').Pool;
const Nemo = require('nemo');
const cwd = process.cwd();
const glob = require('glob');
let testFiles = [];
const instance = require('../lib/instance');
const async = require('async');

function list(val) {
    return val.split(',');
}
function cwdPath(rel) {
    return path.resolve(cwd, rel);
}
program
    .version(JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')).version)
    .usage('[options]')
    .option('-B, --base-directory <path>', 'parent directory for config/ and spec/ (or other test file) directories. relative to cwd', cwdPath)
    .option('-P, --profile [profile]', 'which profile(s) to run, out of the configuration', list)
    .option('-G, --grep <pattern>', 'only run tests matching <pattern>', list)
    // .option('-F, --file ', 'run parallel by file')
    .option('--debug-brk', "enable node's debugger breaking on the first line")
    .option('--inspect', 'activate devtools in chrome')
    .parse(process.argv);
program._name = 'nemo-runner';
Nemo.Configure(program.baseDirectory, {}).then(function (config) {
    let base = config.get(`profiles:base`);
    let profiles = program.profile;
    let greps = program.grep || '';
    let results = [];
    const pool = new Pool(base.threads || 2);

    profiles = (profiles instanceof Array) ? profiles : [profiles];
    greps = (greps instanceof Array) ? greps : [greps];
    let profilesConf = [];
    profiles.forEach(function (profile) {

        greps.forEach(function (grep) {
            var profileConf = Object.assign({}, base, config.get(`profiles:${profile}`));
            var profileLabel = `profile: ${profile || 'default'}`;
            profileLabel += (grep !== '') ? `, grep: ${grep}` : '';
            profileConf.profileLabel = profileLabel;
            if (grep !== '') {
                profileConf.mocha = Object.assign({}, profileConf.mocha, {grep: grep});
            }
            profilesConf.push(profileConf);
        })
    });
    // let testFileGlob = path.resolve(program.baseDirectory, profilesConf[0].tests);
    let testFileGlobs = profilesConf.map(function (pconf) {
        return function (cb) {
            let testFileGlob = path.resolve(program.baseDirectory, pconf.tests);
            glob(testFileGlob, {}, function (err, files) {
                if (err) {
                    return cb(err);
                }
                pconf.tests = files;
                cb(null, pconf);
            });
        }
    });
    async.parallel(testFileGlobs, function (err, profileConfs) {
        console.log('result of async', profileConfs);
        if (profileConfs.length === 1) {
            return instance({basedir: program.baseDirectory, profile: profileConfs[0] || 'default'});
        }
        //parallel use case
        profileConfs.forEach(function (profileConf) {
            pool.run(instance)
                .send({basedir: program.baseDirectory, profile: profileConf});
        });
    });
    pool.on('done', function (job, summary) {
        console.log('Thread complete', summary);
        results.push(summary);
    })
        .on('finished', function () {
            let totals = {label: 'TOTAL', total: 0, pass: 0, fail: 0};
            console.log('Everything done, shutting down the thread pool.');
            results.forEach(function (result) {
                totals.total += result.total;
                totals.pass += result.pass;
                totals.fail += result.fail;
            });
            results.push(totals);
            console.log(results);
            pool.killAll();
        })
        .on('error', function (job, error) {
            console.error('Job errored:', error);
        })

});