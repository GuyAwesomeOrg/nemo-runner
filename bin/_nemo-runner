#!/usr/bin/env node
'use strict';


/**
 * Module dependencies.
 */

var program = require('commander');
var path = require('path');
var fs = require('fs');
var spawn = require('threads').spawn;
var Nemo = require('nemo');
var Promise = require('bluebird');
var cwd = process.cwd();
var glob = require('glob');
var instance = require('../lib/instance');
var async = require('async');
var merge = require('lodash.merge');
var debug = require('debug');
var log = debug('nemo-runner:log');
var error = debug('nemo-runner:error');
var filenamify = require('filenamify');

function list(val) {
  return val.split(',');
}
function cwdPath(rel) {
  return path.resolve(cwd, rel);
}
program
  .version(JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')).version)
  .usage('[options]')
  .option('-B, --base-directory <path>', 'parent directory for config/ and spec/ (or other test file) directories. relative to cwd', cwdPath)
  .option('-P, --profile [profile]', 'which profile(s) to run, out of the configuration', list)
  .option('-G, --grep <pattern>', 'only run tests matching <pattern>', list)
  // .option('-F, --file ', 'run parallel by file')
  .option('--debug-brk', 'enable node\'s debugger breaking on the first line')
  .option('--inspect', 'activate devtools in chrome')
  .option('--no-timeouts', 'remove timeouts in debug/inspect use case')
  .parse(process.argv);

program._name = 'nemo-runner';

Nemo.Configure(program.baseDirectory, {}).then(function (config) {
  var base = config.get('profiles:base');
  var profiles = program.profile;
  var greps = program.grep || '';
  var results = [];
  var profilesConf = [];

  function filenameAppend(conf, str) {
    // handles "mochawesome" and "mocha-jenkins-reporter" so far
    if (!conf.mocha.reporterOptions) {
      error('didnt find reporterOptions');
      return;
    }
    if (conf.mocha.reporterOptions.reportFilename) {
      conf.mocha.reporterOptions.reportFilename = `${conf.mocha.reporterOptions.reportFilename}_${str}`;
    }
    if (conf.mocha.reporterOptions.junit_report_path) {
      conf.mocha.reporterOptions.junit_report_path = conf.mocha.reporterOptions.junit_report_path.replace(/\.xml$/, `_${str}.xml`);
    }
  }

  profiles = (profiles instanceof Array) ? profiles : [profiles];
  greps = (greps instanceof Array) ? greps : [greps];

  profiles.forEach(function (profile, pIndex, pArray) {
    log('profile %s', profile);
    var profileObj = config.get(`profiles:${profile}`);
    greps.forEach(function (grep, gIndex, gArray) {
      log('grep %s', grep);
      var profileConf = merge({}, base, profileObj);
      var profileLabel = `profile: ${profile || 'default'}`;
      profileLabel = profileLabel + ((grep !== '') ? `, grep: ${grep}` : '');
      profileConf.profileLabel = profileLabel;
      if (!program.timeouts) {
        profileConf.mocha.timeout = 1200000;
      }
      if (grep !== '') {
        profileConf.mocha.grep = grep;
        filenameAppend(profileConf, filenamify(grep));
      }
      var testFileGlob = path.resolve(program.baseDirectory, profileConf.tests);
      glob(testFileGlob, {}, function (err, files) {
        log('glob %s', files);
        if (err) {
          return rej(err);
        }
        if (base.parallel && base.parallel === 'file') {
          files.forEach(function (file) {
            var justFile = file.split(program.baseDirectory)[1];
            justFile = filenamify(justFile);
            var _pconf = merge({}, profileConf);
            _pconf.tests = [file];
            filenameAppend(_pconf, justFile);
            log('push file profile %s', profileConf);
            profilesConf.push(_pconf);
          });
        } else {
          profileConf.tests = files;
          profilesConf.push(profileConf);
        }
        if (pIndex === pArray.length - 1 && gIndex === gArray.length - 1) {
          kickoff(profilesConf);
        }
      });

    });
  });

  function kickoff(profileConfs) {
    async.parallel([function (cb) {
      cb()
    }], function (err, p) {
      var complete = 0;
      if (err) {
        error(err);
        process.exit();
      }
      log('result of async', profileConfs);
      if (profileConfs.length === 1) {
        // TODO: below doesn't impact debuglogs of modules already loaded
        process.env = Object.assign({}, process.env, profileConfs[0].env || {});
        return instance({basedir: program.baseDirectory, profile: profileConfs[0] || 'default'});
      }
      // parallel use case
      profileConfs.forEach(function (profileConf) {
        var thread = spawn(instance, {env: Object.assign({}, process.env, profileConf.env || {})});
        thread
          .send({basedir: program.baseDirectory, profile: profileConf})
          // The handlers come here: (none of them is mandatory)
          .on('message', function (summary) {
            log('Thread complete', summary);
            results.push(summary);
            thread.kill();
          })
          .on('error', function (er) {
            error(er);
          })
          .on('exit', function () {
            var totals;
            complete = complete + 1;
            thread.removeAllListeners('message');
            thread.removeAllListeners('error');
            thread.removeAllListeners('exit');
            if (complete === profileConfs.length) {
              totals = {label: 'TOTAL', total: 0, pass: 0, fail: 0};
              log('Everything done, shutting down the thread pool.');
              results.forEach(function (result) {
                totals.total = totals.total + result.total;
                totals.pass = totals.pass + result.pass;
                totals.fail = totals.fail + result.fail;
              });
              results.push(totals);
              /* eslint-disable */
              console.log(results);
              /* eslint-enable */
            }
          });
      });
    });
  }



});
