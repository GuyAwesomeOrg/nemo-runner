#!/usr/bin/env node
'use strict';


/**
 * Module dependencies.
 */

var program = require('commander');
var path = require('path');
var fs = require('fs');
var Nemo = require('nemo');
var cwd = process.cwd();
var glob = require('glob');
var util = require('../lib/util');
var flow = require('../lib/flow');
var async = require('async');
var merge = require('lodash.merge');
var debug = require('debug');
var log = debug('nemo-runner:log');
var error = debug('nemo-runner:error');
var filenamify = require('filenamify');

function list(val) {
  return val.split(',');
}
function cwdPath(rel) {
  return path.resolve(cwd, rel);
}
program
  .version(JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')).version)
  .usage('[options]')
  .option('-B, --base-directory <path>', 'parent directory for config/ and spec/ (or other test file) directories. relative to cwd', cwdPath)
  .option('-P, --profile [profile]', 'which profile(s) to run, out of the configuration', list)
  .option('-G, --grep <pattern>', 'only run tests matching <pattern>', list)
  // .option('-F, --file ', 'run parallel by file')
  .option('--debug-brk', 'enable node\'s debugger breaking on the first line')
  .option('--inspect', 'activate devtools in chrome')
  .option('--no-timeouts', 'remove timeouts in debug/inspect use case')
  .parse(process.argv);

program._name = 'nemo-runner';

Nemo.Configure(program.baseDirectory, {}).then(function (config) {
  let prefontaine = {program: program, config: config};
  flow = flow.map(function (fn) {
    return fn.bind(prefontaine);
  });
  log('flow length %d', flow.length);

  async.series(flow, function () {
    log('assembled %d instances', prefontaine.instances.length);
    util.kickoff.apply(prefontaine);

  });
  // pyramid
  var base = config.get('profiles:base');
  var profiles = program.profile;
  var greps = program.grep || '';
  var profilesConf = [];
  profiles = (profiles instanceof Array) ? profiles : [profiles];
  greps = (greps instanceof Array) ? greps : [greps];
  function pyramid(profile, pIndex, pArray) {
    log('profile %s', profile);
    var profileObj = config.get(`profiles:${profile}`);
    greps.forEach(function (grep, gIndex, gArray) {
      log('grep %s', grep);
      var profileConf = merge({}, base, profileObj);
      var label = `profile: ${profile || 'default'}`;
      label = label + ((grep !== '') ? `, grep: ${grep}` : '');
      profileConf.label = label;
      if (!program.timeouts) {
        profileConf.mocha.timeout = 1200000;
      }
      if (grep !== '') {
        profileConf.mocha.grep = grep;
        util.append(profileConf, filenamify(grep));
      }
      var testFileGlob = path.resolve(program.baseDirectory, profileConf.tests);
      glob(testFileGlob, {}, function (err, files) {
        log('glob %s', files);
        if (err) {
          return rej(err);
        }
        if (base.parallel && base.parallel === 'file') {
          files.forEach(function (file) {
            var justFile = file.split(program.baseDirectory)[1];
            justFile = filenamify(justFile);
            var _pconf = merge({}, profileConf);
            _pconf.tests = [file];
            util.append(_pconf, justFile);
            log('push file profile %s', profileConf);
            profilesConf.push(_pconf);
          });
        } else {
          profileConf.tests = files;
          profilesConf.push(profileConf);
        }
        if (pIndex === pArray.length - 1 && gIndex === gArray.length - 1) {
          util.kickoff(profilesConf, program);
        }
      });

    });
  }
  // profiles.forEach(pyramid);
}).catch(function (err) {
  error('problem with main configuration %O', err);
});

