#!/usr/bin/env node
'use strict';


/**
 * Module dependencies.
 */

var program = require('commander');
var path = require('path');
var fs = require('fs');
var resolve = path.resolve;

var Nemo = require('nemo');
var join = path.join;
var cwd = process.cwd();
var glob = require('glob');
let testFiles = [];
let go = require('../lib/instance');

function list(val) {
    return val.split(',');
}
function cwdPath(rel) {
    return path.resolve(cwd, rel);
}
program
    .version(JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')).version)
    .usage('[options]')
    .option('-B, --base-directory <path>', 'parent directory for config/ and spec/ (or other test file) directories. relative to cwd', cwdPath)
    .option('-P, --profile [profile]', 'which profile(s) to run, out of the configuration', list)
    .option('-G, --grep <pattern>', 'only run tests matching <pattern>', list)
    .option('-F, --file ', 'run parallel by file')
    .option('--debug-brk', "enable node's debugger breaking on the first line")
    .option('--inspect', 'activate devtools in chrome')
    .parse(process.argv);
program._name = 'nemo-runner';
Nemo.Configure(program.baseDirectory, {}).then(function (config) {
    let base = config.get(`profiles:base`);
    let target = program.profile && config.get(`profiles:${program.profile}`);

    let profileConf = Object.assign(base, target);
    let testFileGlob = path.resolve(program.baseDirectory, profileConf.tests);
    glob(testFileGlob, {}, function (er, files) {
        // files is an array of filenames.
        // If the `nonull` option is set, and nothing
        // was found, then files is ["**/*.js"]
        // er is an error object or null.
        console.log(files);
        testFiles = files;
        go(program, profileConf, testFiles);
    });
});
//baseDirectory (static)
//test glob (dynamic)
//mocha config (dynamic)
//driver config (dynamic)
